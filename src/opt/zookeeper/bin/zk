#!/usr/bin/env python3

import sys
from sys import path
import yaml
import argparse
import logging
import socket
import subprocess
from pathlib import Path
from typing import List
from jinja2 import Template
from yaml import load
from yaml.loader import FullLoader


FORMAT = '%(asctime)-15s %(message)s'
logging.basicConfig(format=FORMAT)
log = logging.getLogger(__name__)

ZOO_CFG = {
  "size": 0,
  "properties": {
    "tickTime": 2000,
    "initLimit": 10,
    "syncLimit": 5,
    "dataDir": "/var/lib/zookeeper",
    "clientPort": 2181,
    "maxClientCnxns": 60,
    "autopurge.snapRetainCount": 3,
    "autopurge.purgeInterval": 1,
    "metricsProvider.className": "org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider",
    "metricsProvider.httpPort": 7000,
    "metricsProvider.exportJvmInfo": "true",
    "4lw.commands.whitelist": "*"
  }
}

LOG4J_PROPERTIES = {
  "properties": {
    "zookeeper.root.logger": "INFO, CONSOLE",
    "zookeeper.console.threshold": "INFO",
    "zookeeper.log.dir": ".",
    "zookeeper.log.file": "zookeeper.log",
    "zookeeper.log.threshold": "INFO",
    "zookeeper.log.maxfilesize": "256MB",
    "zookeeper.log.maxbackupindex": 20,
    "zookeeper.tracelog.dir": "${zookeeper.log.dir}",
    "zookeeper.tracelog.file": "zookeeper_trace.log",
    "log4j.rootLogger": "${zookeeper.root.logger}",
    "log4j.appender.CONSOLE": "org.apache.log4j.ConsoleAppender",
    "log4j.appender.CONSOLE.Threshold": "${zookeeper.console.threshold}",
    "log4j.appender.CONSOLE.layout": "org.apache.log4j.PatternLayout",
    "log4j.appender.CONSOLE.layout.ConversionPattern": "%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n",
    "log4j.appender.ROLLINGFILE": "org.apache.log4j.RollingFileAppender",
    "log4j.appender.ROLLINGFILE.Threshold":" ${zookeeper.log.threshold}",
    "log4j.appender.ROLLINGFILE.File": "${zookeeper.log.dir}/${zookeeper.log.file}",
    "log4j.appender.ROLLINGFILE.MaxFileSize": "${zookeeper.log.maxfilesize}",
    "log4j.appender.ROLLINGFILE.MaxBackupIndex": "${zookeeper.log.maxbackupindex}",
    "log4j.appender.ROLLINGFILE.layout": "org.apache.log4j.PatternLayout",
    "log4j.appender.ROLLINGFILE.layout.ConversionPattern": "%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n",
    "log4j.appender.TRACEFILE": "org.apache.log4j.FileAppender",
    "log4j.appender.TRACEFILE.Threshold": "TRACE",
    "log4j.appender.TRACEFILE.File": "${zookeeper.tracelog.dir}/${zookeeper.tracelog.file}",
    "log4j.appender.TRACEFILE.layout": "org.apache.log4j.PatternLayout",
    "log4j.appender.TRACEFILE.layout.ConversionPattern": "%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L][%x] - %m%n",
    "zookeeper.auditlog.file": "zookeeper_audit.log",
    "zookeeper.auditlog.threshold": "INFO",
    "audit.logger": "INFO, RFAAUDIT",
    "log4j.logger.org.apache.zookeeper.audit.Log4jAuditLogger": "${audit.logger}",
    "log4j.additivity.org.apache.zookeeper.audit.Log4jAuditLogger": "false",
    "log4j.appender.RFAAUDIT": "org.apache.log4j.RollingFileAppender",
    "log4j.appender.RFAAUDIT.File": "${zookeeper.log.dir}/${zookeeper.auditlog.file}",
    "log4j.appender.RFAAUDIT.layout": "org.apache.log4j.PatternLayout",
    "log4j.appender.RFAAUDIT.layout.ConversionPattern": "%d{ISO8601} %p %c{2}: %m%n",
    "log4j.appender.RFAAUDIT.Threshold": "${zookeeper.auditlog.threshold}",
    "log4j.appender.RFAAUDIT.MaxFileSize": "10MB",
    "log4j.appender.RFAAUDIT.MaxBackupIndex": 10
  }
}

MYID_TEMPLATE = """
{{ myid }}
""".lstrip()

ZOO_CFG_TEMPLATE = """
{% for key, value in properties.items() -%}
{{ key }}={{ value }}
{% endfor %}
{% for ordinal in range(size) -%}
server.{{ ordinal }}={{ name }}-{{ ordinal }}.{{ domain }}:2888:3888
{% endfor %}
""".lstrip()

LOG4J_PROPERTIES_TEMPLATE = """
{% for key, value in properties.items() -%}
{{ key }}={{ value }}
{% endfor %}
""".lstrip()

def builder(args: argparse.Namespace):
  src = Path(args.srcdir).resolve()
  dest = Path(args.destdir).resolve()
  myid = args.myid

  # Load the zoo.cfg overrides
  size = ZOO_CFG.get("size", 0)
  properties = ZOO_CFG.get("properties", {})
  config = Path(src / "zoo.cfg.yaml").resolve()
  if config.exists():
    with open(config, "r") as f:
      overrides = yaml.load(f.read(), Loader=FullLoader)
      size = overrides.get("size", size)
      properties.update(overrides.get("properties", {}))

  # Create the data directory if it doesn't exist
  data_dir = Path(properties.get("dataDir", "/var/lib/zookeeper"))
  if not data_dir.exists():
    data_dir.mkdir(exist_ok=True, parents=True)

  # Hostnames are expected to look like this: zk-0.zookeeper.default.svc.cluster.local
  # It's also expected that each will live in the same namespace/cluster
  hostname, domain = socket.getfqdn().split(".", 1)
  name, ordinal = hostname.rsplit("-", 1)
  log.info(f"Hostname: {hostname}")
  log.info(f"Domain: {domain}")
  log.info(f"Name: {name}")
  log.info(f"Ordinal: {ordinal}")


  # Only create the id file if there's more than 1 server in the cluster
  if size > 1:
    template = Template(MYID_TEMPLATE)
    with open(Path(data_dir / "myid").resolve(), "w") as f:
      log.info("Creating myid")
      if not myid:
        myid = ordinal

      f.write(template.render(myid=myid))

  # Generate the zoo.cfg file
  template = Template(ZOO_CFG_TEMPLATE)
  with open(Path(dest / "zoo.cfg").resolve(), "w") as f:
    log.info("Creating zoo.cfg")
    f.write(template.render(size=size, name=name, domain=domain, properties=properties))

  # Load log4j overrides
  properties = LOG4J_PROPERTIES.get("properties", {})
  config = Path(src / "log.properties.yaml").resolve()
  if config.exists():
    with open(config, "r") as f:
      overrides = yaml.load(f.read(), Loader=FullLoader)
      properties.update(overrides.get("properties", {}))

  # Generate log4j properties file
  template = Template(LOG4J_PROPERTIES_TEMPLATE)
  with open(Path(dest / "log4j.properties").resolve(), "w") as f:
    log.info("Creating log4j.properties")
    f.write(template.render(properties=properties))


def run(args: argparse.Namespace) -> int:
  dest = Path(args.destdir).resolve()

  cmd = [ "/opt/zookeeper/bin/zkServer.sh", "--config", str(dest), "start-foreground" ]
  log.debug("Running: " + " ".join(cmd))

  process = subprocess.run(cmd, shell=False, stderr=subprocess.STDOUT)
  return process.returncode


def parse(args: List[str]) -> argparse.Namespace:
  parser = argparse.ArgumentParser()
  parser.add_argument("--srcdir", default="/etc/zookeeper.d", help="Directory with source templates and defaults.")
  parser.add_argument("--destdir", default="/etc/zookeeper", help="Output directory.")
  parser.add_argument("--debug", action="store_true")
  parser.add_argument("--myid", help="Override the id of the server.  Default is the ordinal suffix of the hostname.")
  return parser.parse_args(args)


def main() -> int:
  log.debug("Parsing command line arguments")
  args = parse(sys.argv[1:])
  if args.debug:
    log_level = logging.DEBUG
  else:
    log_level = logging.INFO

  log.setLevel(log_level)
  log.info(f"Logging with level: {log_level}")

  try:
    builder(args)
    return run(args)
  except Exception as ex:
    log.error(ex)
    return 1
  
  return 0


if __name__ == "__main__":
  sys.exit(main())
